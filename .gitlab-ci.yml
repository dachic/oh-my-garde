stages:
  - build
  - test
  - deploy

image: kabaconde/docker-in-docker-ci:latest

services:
  - docker:19.03.1-dind

variables:
  IMAGE_TAG: ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest

before_script:
  - docker --version
  - docker-compose --version

.init_project: &init_project |
  cp .env.example .env
  make copy-ci
  make build

.init_staging_ssh: &init_staging_ssh |
  eval $(ssh-agent -s)
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

.init_front_production_ssh: &init_front_production_ssh |
  eval $(ssh-agent -s)
  echo "$PRODUCTION_FRONT_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

.deploy_staging_ssh: &deploy_staging_ssh |
  ssh -p $SSH_PORT $SSH_USER@$SSH_HOST bash -c "'
    echo "SSH Login successfully"
    echo "Browsing to project path..."
    cd $PROJECT_PATH
    git fetch --all
    git checkout $CI_COMMIT_BRANCH
    echo "Starting deployment $CI_DEPLOY_USER"
    make deploy
    exit
  '"

.deploy_front_production_ssh: &deploy_front_production_ssh |
  rsync -azPq --delete ./client/build/"$PRODUCTION_FRONT_SSH_USER@$PRODUCTION_FRONT_SSH_HOST:~/src/"

client:staging:build:
  stage: build
  script:
    - *init_project
    - echo "====== Install dependencied ======"
    - docker-compose run node yarn install
    - echo "====== Build react APP ======"
    - echo "REACT_APP_API_URL=$STAGING_API_URL" > ./client/.env.local
    - docker-compose run node yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-client-cache-staging
    paths:
      - client/node_modules/
  artifacts:
    name: yarn-client-build-staging
    expire_in: 1 days
    paths:
      - client/build/

client:production:build:
  stage: build
  script:
    - *init_project
    - echo "====== Install dependencied ======"
    - docker-compose run node yarn install
    - echo "====== Build react APP ======"
    - echo "REACT_APP_API_URL=$PRODUCTION_API_URL" > ./client/.env.local
    - docker-compose run node yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-client-cache-production
    paths:
      - client/node_modules/
  artifacts:
    name: yarn-client-build-production
    expire_in: 1 days
    paths:
      - client/build/

server:build:
  stage: build
  script:
    - *init_project
    - make cinstall
    - make down
  cache:
    key: ${CI_COMMIT_REF_SLUG}-server-cache
    paths:
      - server/node_modules/
      - server/vendor/
      - server/var/
  artifacts:
    expire_in: 1 days
    when: always
    paths:
      - server/public
      - server/node_modules/
      - server/vendor/
      - server/var/

# important to clear cache before any operation with database
phpunit:test:
  stage: test
  dependencies:
    - server:build
  script:
    - *init_project
    - make wait_db_to_ready
    - make compile
    - make cache-clear
    - make migrate
    - make test
    - make down

staging:continuous:deploy:
  stage: deploy
  script:
    - *init_staging_ssh
    - *deploy_staging_ssh
  environment:
    name: staging
    url: $STAGING_URL
  when: manual
  except:
    - develop
    - master

staging:deploy:
  stage: deploy
  dependencies: []
  script:
    - *init_staging_ssh
    - *deploy_staging_ssh
  environment:
    name: staging
    url: $STAGING_URL
  when: manual
  only:
    - develop

production:front:deploy:
  stage: deploy
  dependencies:
    - client:production:build
  script:
    - echo "====== Deploy client to production server ======"
    - apk update && apk upgrade
    - apk add openssh bash rsync
    - *init_front_production_ssh
    - *deploy_front_production_ssh
  environment:
    name: production
    url: $PRODUCTION_URL
  when: manual
#   only:
#     - master
